#mouse
set -g mouse on
set-option -s set-clipboard on

unbind-key MouseDown2Pane
bind-key -n MouseDown2Pane run " \
  X=$(xclip -o -sel clipboard); \
  tmux set-buffer \"$X\"; \
  tmux paste-buffer -p; \
  tmux display-message 'pasted!' \
"

#C-b is not acceptable -- Vim uses it
# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

#Allows to use C-a to send commands to a TMUX session inside another TMUX session
bind-key a send-prefix

#Auto-window rename
set-window-option -g automatic-rename
# don't rename windows automatically
set-option -g allow-rename off

# Middle click to paste from the clipboard
unbind-key MouseDown2Pane
bind-key -n MouseDown2Pane run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"
#copy from buffer
## Use vim keybindings in copy mode
set-option -g mouse on
setw -g mode-keys vi
bind P paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X rectangle-toggle
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'xclip -se c -i'

# used colours
GREY="colour233"
LGREY="colour235"
BLUE="colour4"
BLACK="#000000"
ORANGE="colour172"
GREEN="colour76"
WHITE="colour252"

# upgrade $TERM
set -g default-terminal "screen-256color"

# window/pane navigation
bind -r k select-pane -U\; refresh-client -S
bind -r j select-pane -D\; refresh-client -S
bind -r l select-pane -R\; refresh-client -S
bind -r h select-pane -L\; refresh-client -S

bind -r C-h run "tmux select-pane -L"
bind -r C-j run "tmux select-pane -D"
bind -r C-k run "tmux select-pane -U"
bind -r C-l run "tmux select-pane -R"
bind -r C-P run "tmux select-pane -l"

# window navigation
bind    C-w last-window     \; refresh-client -S
bind -r C-p previous-window \; refresh-client -S
bind -r C-n next-window     \; refresh-client -S
bind 0 select-window -t 10  \; refresh-client -S

# window creation/splitting
bind | split-window -h -p 50 -c "#{pane_current_path}"
bind - split-window -v -p 50 -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"
bind i command-prompt -p 'Insert window at:' 'new-window -c "#{pane_current_path}" -a -t %1; swap-window -t -1'
bind I command-prompt -p 'New window at:' 'new-window -c "#{pane_current_path}" -t %1'
unbind '"'
unbind %

# window manipulations
bind a command-prompt -p "Rename window:" "rename-window %%"
bind A command-prompt -p "Rename session:" "rename-session %%"
bind M command-prompt -p "Move window to:" "move-window -t %%"
bind S command-prompt -p "Swap window with:" "swap-window -t %%"

# to cycle through windows
bind b previous-window

# Make the current window the first window
bind T swap-window -t 1

# start session number from 1 rather than 0
set -g base-index 1

# start pane number from 1 similar to windows
set -g pane-base-index 1

#Allows for faster key repetition
set -s escape-time 0

# resize pane
bind -r K resize-pane -U
bind -r J resize-pane -D
bind -r L resize-pane -R
bind -r H resize-pane -L
bind    m resize-pane -Z # toggle maximize pane

#Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# switch between sessions
bind -r ( switch-client -p
bind -r ) switch-client -n

# focus events enabled for terminals that support them
set -g focus-events on

# super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# status bar formats
WINDOW="[#I #W#T]"

#setw -g window-status-current-format $WINDOW
#setw -g window-status-format $WINDOW
set -g status-interval 1
set -g status-right-length 150
#set -g status-left "#(~/.tmux_path.sh #{pane_current_path}) %Y-%m-%d %H:%M:%S"
set -g window-status-current-format "[#[fg=white] #(~/.tmux_path.sh #{pane_current_path})]"
set -g window-status-format "#[fg=black] #(~/.tmux_path.sh #{pane_current_path})"
set -g status-right '#[fg=green][#[fg=white]#H#{pane_current_path}#[fg=green]][#[fg=black,bold]%d-%h-%Y #[bg=green,fg=white,bold]%H:%M:%S#[default]#[fg=green]]'


#set -g status-left '#{pane_current_path}'
# default statusbar colors
set -g status-fg $WHITE
set -g status-bg $GREY

# watch for activity in background windows
setw -g monitor-activity on
set -g visual-activity on

# set active/pasive pane background colours
set -g window-style fg=default
%if "#{==:#{host},myhost}"
set -g status-style bg=$GREY
%elif "#{==:#{host},myotherhost}"
set -g status-style bg=green
%else 
set -g status-style bg=blue
%endif
set -g window-active-style fg=default
set -g window-active-style bg=$BLACK

set -g status 'on'
set -g status-position top
set -g status-justify 'right'
set -g status-right-length '100'
set -g message-command-style fg=black,bg=cyan
set -g message-style fg=black,bg=cyan
set -g pane-active-border-style fg=cyan,bg=cyan
set -g pane-border-style fg=cyan
setw -g window-status-style fg=yellow,none
setw -g window-status-activity-style fg=green,bg=black,none
setw -g window-status-style bg=black

# pane colors
set -g display-panes-active-colour $ORANGE
set -g display-panes-colour $WHITE

# put useful info in the status bar
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T' 

# recording  program output to a log
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

### Sane scrolling
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# Bigger history
set-option -g history-limit 50000

# alternate mapping to clear-screen
bind C-l send-keys 'C-l'

# reload config file (change file location to your the tmux.conf you want to use)

bind r source-file ${HOME}/.tmux.conf\; display-message "Config reloaded..."

#Installing plugins

    #Add new plugin to ~/.tmux.conf with set -g @plugin '...'
    #Press prefix + I (capital i, as in Install) to fetch the plugin.

#You're good to go! The plugin was cloned to ~/.tmux/plugins/ dir and sourced.

#Uninstalling plugins

    #Remove (or comment out) plugin from the list.
    #Press prefix + alt + u (lowercase u as in uninstall) to remove the plugin.

#All the plugins are installed to ~/.tmux/plugins/ so alternatively you can find plugin directory there and remove it.

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'christoomey/vim-tmux-navigator'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'
set -g @continuum-restore 'on'
set -g @resurrect-hook-post-save-all 'eval $(xdotool getwindowgeometry --shell $WINDOWID); echo 0,$X,$Y,$WIDTH,$HEIGHT > $HOME/.tmux/resurrect/geometry'
set -g @resurrect-hook-pre-restore-all 'wmctrl -i -r $WINDOWID -e $(cat $HOME/.tmux/resurrect/geometry)'

run '${HOME}/.tmux/plugins/tpm/tpm'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run "${HOME}/.tmux/plugins/tpm/tpm"